//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/InputActions/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/InputActions/PlayerInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Ingame"",
            ""id"": ""ba0fd2f9-378e-4b16-9a43-43484bbf351e"",
            ""actions"": [
                {
                    ""name"": ""M_LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""c1f26fa9-aa98-4334-bcbc-407deeafec60"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""M_RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""58678b0a-7e19-4813-b02a-68917685ba83"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""M_Wheel"",
                    ""type"": ""Value"",
                    ""id"": ""889f0f0d-896f-4f4a-a38e-9b350664f1b2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""M_WheelClick"",
                    ""type"": ""Button"",
                    ""id"": ""23917d50-ea7d-4745-b15e-04a60dda8aae"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""M_MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""ae30a0dd-3c4d-4961-b7ba-3d5d798bec58"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""976d4acd-901f-4266-97d2-e4aeb9274c7f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M_LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c34613b-4d0c-44e9-a68e-a344d41f7bc9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M_RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""31f35ab7-ea1d-450e-badd-299ae22c13da"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M_Wheel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9d471a88-0688-4092-ad90-1fd1ed7ec7b4"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M_Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1c119bce-749c-4bea-8f8c-78acec90fbb4"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M_Wheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ca51c3a2-a414-44f0-8cd5-79937b369c10"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M_WheelClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab4be0d2-a542-42ba-84a3-93145f258110"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""M_MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ingame
        m_Ingame = asset.FindActionMap("Ingame", throwIfNotFound: true);
        m_Ingame_M_LeftClick = m_Ingame.FindAction("M_LeftClick", throwIfNotFound: true);
        m_Ingame_M_RightClick = m_Ingame.FindAction("M_RightClick", throwIfNotFound: true);
        m_Ingame_M_Wheel = m_Ingame.FindAction("M_Wheel", throwIfNotFound: true);
        m_Ingame_M_WheelClick = m_Ingame.FindAction("M_WheelClick", throwIfNotFound: true);
        m_Ingame_M_MouseMove = m_Ingame.FindAction("M_MouseMove", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Ingame.enabled, "This will cause a leak and performance issues, PlayerInput.Ingame.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ingame
    private readonly InputActionMap m_Ingame;
    private List<IIngameActions> m_IngameActionsCallbackInterfaces = new List<IIngameActions>();
    private readonly InputAction m_Ingame_M_LeftClick;
    private readonly InputAction m_Ingame_M_RightClick;
    private readonly InputAction m_Ingame_M_Wheel;
    private readonly InputAction m_Ingame_M_WheelClick;
    private readonly InputAction m_Ingame_M_MouseMove;
    /// <summary>
    /// Provides access to input actions defined in input action map "Ingame".
    /// </summary>
    public struct IngameActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public IngameActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Ingame/M_LeftClick".
        /// </summary>
        public InputAction @M_LeftClick => m_Wrapper.m_Ingame_M_LeftClick;
        /// <summary>
        /// Provides access to the underlying input action "Ingame/M_RightClick".
        /// </summary>
        public InputAction @M_RightClick => m_Wrapper.m_Ingame_M_RightClick;
        /// <summary>
        /// Provides access to the underlying input action "Ingame/M_Wheel".
        /// </summary>
        public InputAction @M_Wheel => m_Wrapper.m_Ingame_M_Wheel;
        /// <summary>
        /// Provides access to the underlying input action "Ingame/M_WheelClick".
        /// </summary>
        public InputAction @M_WheelClick => m_Wrapper.m_Ingame_M_WheelClick;
        /// <summary>
        /// Provides access to the underlying input action "Ingame/M_MouseMove".
        /// </summary>
        public InputAction @M_MouseMove => m_Wrapper.m_Ingame_M_MouseMove;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Ingame; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="IngameActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(IngameActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="IngameActions" />
        public void AddCallbacks(IIngameActions instance)
        {
            if (instance == null || m_Wrapper.m_IngameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_IngameActionsCallbackInterfaces.Add(instance);
            @M_LeftClick.started += instance.OnM_LeftClick;
            @M_LeftClick.performed += instance.OnM_LeftClick;
            @M_LeftClick.canceled += instance.OnM_LeftClick;
            @M_RightClick.started += instance.OnM_RightClick;
            @M_RightClick.performed += instance.OnM_RightClick;
            @M_RightClick.canceled += instance.OnM_RightClick;
            @M_Wheel.started += instance.OnM_Wheel;
            @M_Wheel.performed += instance.OnM_Wheel;
            @M_Wheel.canceled += instance.OnM_Wheel;
            @M_WheelClick.started += instance.OnM_WheelClick;
            @M_WheelClick.performed += instance.OnM_WheelClick;
            @M_WheelClick.canceled += instance.OnM_WheelClick;
            @M_MouseMove.started += instance.OnM_MouseMove;
            @M_MouseMove.performed += instance.OnM_MouseMove;
            @M_MouseMove.canceled += instance.OnM_MouseMove;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="IngameActions" />
        private void UnregisterCallbacks(IIngameActions instance)
        {
            @M_LeftClick.started -= instance.OnM_LeftClick;
            @M_LeftClick.performed -= instance.OnM_LeftClick;
            @M_LeftClick.canceled -= instance.OnM_LeftClick;
            @M_RightClick.started -= instance.OnM_RightClick;
            @M_RightClick.performed -= instance.OnM_RightClick;
            @M_RightClick.canceled -= instance.OnM_RightClick;
            @M_Wheel.started -= instance.OnM_Wheel;
            @M_Wheel.performed -= instance.OnM_Wheel;
            @M_Wheel.canceled -= instance.OnM_Wheel;
            @M_WheelClick.started -= instance.OnM_WheelClick;
            @M_WheelClick.performed -= instance.OnM_WheelClick;
            @M_WheelClick.canceled -= instance.OnM_WheelClick;
            @M_MouseMove.started -= instance.OnM_MouseMove;
            @M_MouseMove.performed -= instance.OnM_MouseMove;
            @M_MouseMove.canceled -= instance.OnM_MouseMove;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="IngameActions.UnregisterCallbacks(IIngameActions)" />.
        /// </summary>
        /// <seealso cref="IngameActions.UnregisterCallbacks(IIngameActions)" />
        public void RemoveCallbacks(IIngameActions instance)
        {
            if (m_Wrapper.m_IngameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="IngameActions.AddCallbacks(IIngameActions)" />
        /// <seealso cref="IngameActions.RemoveCallbacks(IIngameActions)" />
        /// <seealso cref="IngameActions.UnregisterCallbacks(IIngameActions)" />
        public void SetCallbacks(IIngameActions instance)
        {
            foreach (var item in m_Wrapper.m_IngameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_IngameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="IngameActions" /> instance referencing this action map.
    /// </summary>
    public IngameActions @Ingame => new IngameActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Ingame" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="IngameActions.AddCallbacks(IIngameActions)" />
    /// <seealso cref="IngameActions.RemoveCallbacks(IIngameActions)" />
    public interface IIngameActions
    {
        /// <summary>
        /// Method invoked when associated input action "M_LeftClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnM_LeftClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "M_RightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnM_RightClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "M_Wheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnM_Wheel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "M_WheelClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnM_WheelClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "M_MouseMove" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnM_MouseMove(InputAction.CallbackContext context);
    }
}
